{"version":3,"sources":["pages/layout/Header.js","config/menuList.js","config/routes.js","pages/index/index.js","pages/code/index.js","pages/travel/index.js","pages/cook/index.js","pages/cat/index.js","pages/layout/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","Layout","BlogHeader","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","menuChange","e","history","push","key","_this2","react_default","a","createElement","Header_Header","style","background","className","menu","theme","mode","defaultSelectedKeys","lineHeight","float","menuList","map","i","Item","url","fontSize","onClick","name","Component","withRouter","routes","exact","path","component","customHistory","createBrowserHistory","Content","Footer","AppContainer","console","log","react_router_dom","layout","layout_Header","padding","react_router","assign","textAlign","href","App","pages_layout","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sVAIQA,UAAWC,IAAXD,QAEFE,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAGRQ,WAAa,SAACC,GACZR,EAAKD,MAAMU,QAAQC,KAAKF,EAAEG,MALTX,wEAQV,IAAAY,EAAAT,KACP,OACEU,EAAAC,EAAAC,cAACC,EAAD,CAAQC,MAAO,CAACC,WAAY,SAC1BL,EAAAC,EAAAC,cAAA,OAAKI,UAAU,SACfN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACEC,MAAM,QACNC,KAAK,aACLC,oBAAqB,CAAC,KACtBN,MAAO,CAAEO,WAAY,OAAOC,MAAO,UAElCtB,KAAKJ,MAAM2B,SAASC,IAAI,SAAAC,GAAC,OAAIf,EAAAC,EAAAC,cAACK,EAAA,EAAKS,KAAN,CAAWlB,IAAKiB,EAAEE,IAAKb,MAAO,CAACc,SAAU,QAASC,QAASpB,EAAKL,YAAaqB,EAAEK,iBAnB9FC,aA0BVC,cAAWrC,GCzBX4B,EAPE,CACf,CAAEI,IAAK,IAAKG,KAAM,SAClB,CAAEH,IAAK,QAASG,KAAM,gBACtB,CAAEH,IAAK,UAAWG,KAAM,gBACxB,CAAEH,IAAK,QAASG,KAAM,gBACtB,CAAEH,IAAK,OAAQG,KAAM,+BCURG,UARA,CACb,CAAEC,OAAO,EAAMC,KAAM,IAAKC,2LCHxB,OACE1B,EAAAC,EAAAC,cAAA,gEAHiBmB,cDMrB,CAAEI,KAAM,QAASC,2LEJf,OACE1B,EAAAC,EAAAC,cAAA,6BAHiBmB,cFOrB,CAAEI,KAAM,UAAWC,2LGLjB,OACE1B,EAAAC,EAAAC,cAAA,0BAHmBmB,cHQvB,CAAEI,KAAM,QAASC,2LINf,OACE1B,EAAAC,EAAAC,cAAA,wBAHiBmB,cJSrB,CAAEI,KAAM,OAAQC,2LKPd,OACE1B,EAAAC,EAAAC,cAAA,sDAHgBmB,wBCOhBM,EAAgBC,cACdC,EAAoB7C,IAApB6C,QAASC,EAAW9C,IAAX8C,OAwBFC,mLAnBX,OADAC,QAAQC,IAAI3C,KAAKJ,OAEfc,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAQtC,QAAS+B,GACf3B,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAQ7B,UAAU,UAChBN,EAAAC,EAAAC,cAACkC,EAAD,CAAYvB,SAAUA,EAAUjB,QAAS+B,IACzC3B,EAAAC,EAAAC,cAAC2B,EAAD,CAASzB,MAAO,CAAEiC,QAAS,OAAS/B,UAAU,gBAC3CiB,EAAOT,IAAI,SAAAC,GAAC,OACXf,EAAAC,EAAAC,cAACoC,EAAA,EAADlD,OAAAmD,OAAA,GAAWxB,EAAX,CAAcjB,IAAKiB,EAAEU,WAGzBzB,EAAAC,EAAAC,cAAC4B,EAAD,CAAQ1B,MAAO,CAAEoC,UAAW,WAA5B,wBACwB,IACtBxC,EAAAC,EAAAC,cAAA,KAAGuC,KAAK,kCAAR,mBAdepB,aCAZqB,mLARX,OACE1C,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACdN,EAAAC,EAAAC,cAACyC,EAAD,cAJWtB,aCSEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cecaa717.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Menu, Layout } from 'antd'\nimport { withRouter } from 'react-router-dom'\nimport './Header.css'\nconst { Header } = Layout\n\nclass BlogHeader extends Component {\n  constructor(props) {\n    super(props)\n  }\n  // page change event\n  menuChange = (e) => {\n    this.props.history.push(e.key)\n  }\n\n  render() {\n    return (\n      <Header style={{background: '#fff'}}>\n        <div className=\"logo\" />\n        <Menu\n          theme=\"light\"\n          mode=\"horizontal\"\n          defaultSelectedKeys={['/']}\n          style={{ lineHeight: '64px',float: 'right' }}\n        >\n          {this.props.menuList.map(i => <Menu.Item key={i.url} style={{fontSize: '16px'}} onClick={this.menuChange}>{i.name}</Menu.Item>)}\n        </Menu>\n      </Header>\n    )\n  }\n}\n\nexport default withRouter(BlogHeader)","const menuList = [\n  { url: '/', name: 'Dylan' },\n  { url: '/code', name: '代码' },\n  { url: '/travel', name: '旅游' },\n  { url: '/cook', name: '美食' },\n  { url: '/cat', name: '鼓励师' }\n]\nexport default menuList","// routes\nimport Index from '../pages/index/index'\nimport Code from '../pages/code/index'\nimport Travel from '../pages/travel/index'\nimport Cook from '../pages/cook/index'\nimport Cat from '../pages/cat/index'\n\nconst routes = [\n  { exact: true, path: '/', component: Index },\n  { path: '/code', component: Code },\n  { path: '/travel', component: Travel },\n  { path: '/cook', component: Cook },\n  { path: '/cat', component: Cat }\n]\n\nexport default routes","import React, { Component } from 'react'\n\n\nclass HomePage extends Component {\n  render() {\n    return (\n      <p>home page, include banner, article introduce</p>\n    )\n  }\n}\n\nexport default HomePage","import React, { Component } from 'react'\n\n\nclass CodePage extends Component {\n  render() {\n    return (\n      <p>code page</p>\n    )\n  }\n}\n\nexport default CodePage","import React, { Component } from 'react'\n\n\nclass TravelPage extends Component {\n  render() {\n    return (\n      <p>travel</p>\n    )\n  }\n}\n\nexport default TravelPage","import React, { Component } from 'react'\n\n\nclass CookPage extends Component {\n  render() {\n    return (\n      <p>cook</p>\n    )\n  }\n}\n\nexport default CookPage","import React, { Component } from 'react'\n\n\nclass CatPage extends Component {\n  render() {\n    return (\n      <p>cat page, a cat name: 美元</p>\n    )\n  }\n}\n\nexport default CatPage","import { Layout } from 'antd'\nimport React, { Component } from 'react'\nimport BlogHeader from './Header'\n// header menulist\nimport menuList from '../../config/menuList'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport './layout.css'\nimport routes from '../../config/routes'\nimport { createBrowserHistory } from 'history'\n\nconst customHistory = createBrowserHistory()\nconst { Content, Footer } = Layout\n\nclass AppContainer extends Component {\n  render() {\n    console.log(this.props)\n    return (\n      <Router history={customHistory}>\n        <Layout className=\"layout\">\n          <BlogHeader menuList={menuList} history={customHistory} />\n          <Content style={{ padding: '0px' }} className=\"main-content\">\n            {routes.map(i => (\n              <Route {...i} key={i.path} />\n            ))}\n          </Content>\n          <Footer style={{ textAlign: 'center' }}>\n            Blog @2019 Created by{' '}\n            <a href=\"https://github.com/dylan921208\">Dylan</a>\n          </Footer>\n        </Layout>\n      </Router>\n    )\n  }\n}\n\nexport default AppContainer\n","import React, { Component } from 'react';\nimport './App.css';\nimport AppContainer from './pages/layout/index'\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n       <AppContainer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}